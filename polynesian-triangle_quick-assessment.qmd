---
title: "Polynesian Triangle Quick Assessment"
execute:
  echo: false
format:
  html:
    code-tools:
      source: https://github.com/BenioffOceanInitiative/bbnj-scripts/blob/master/polynesian-triangle_quick-assessment.qmd
    toc: true
    toc-depth: 3
editor_options: 
  chunk_output_type: console
---

## Map of Polynesian Triangle & High Seas

The Polynesian Triangle ([Wikipedia](https://en.wikipedia.org/wiki/Polynesian_Triangle)) is a region of the Pacific Ocean with three island groups at its corners:

1. Hawai‘i
2. Easter Island (Rapa Nui) and 
3. New Zealand (Aotearoa).

```{r setup}
# libraries
librarian::shelf(
  benioffoceaninitiative/bbnj, 
  dplyr, DT, ggplot2, glue, here, leaflet, mapview, mregions, plotly, 
  raster, RColorBrewer, readr, sf, smoothr, stringr, terra, tibble,
  quiet = T)
select = dplyr::select
options(readr.show_col_types = F)

dir_out   <- here("data/polynesian-triangle")
h_geo     <- here("data/polynesian-triangle.geojson")
stats_csv <- here("data/polynesian-triangle_stats.csv")
```

```{r generate}
#| eval: false

# check for convex hull of Polynesian Triangle
if (!file.exists(h_geo)){
  # create if not present
  
  # paths
  ply_shp <- "/Users/bbest/My Drive/projects/bbnj/data/polynesian-triangle_shapefile/polynesian_triangle_clipped.shp"
  
  eezs <- rbind(
    mr_records_by_type(type = "EEZ"),
    mr_records_by_type(type = "EEZ", offset = 101),
    mr_records_by_type(type = "EEZ", offset = 201)) |> 
    tibble()
  
  # eezs$preferredGazetteerName |> 
    # str_subset("Hawaii") # "United States Exclusive Economic Zone (Hawaii)"
    # str_subset("Zealand") # "New Zealand Exclusive Economic Zone"
    # str_subset("Easter")   # "Chilean Exclusive Economic Zone (Easter Island)"
  
  tri_eezs <- c(
    "United States Exclusive Economic Zone (Hawaii)",
    "New Zealand Exclusive Economic Zone",
    "Chilean Exclusive Economic Zone (Easter Island)")
  
  mrgids <- eezs |> 
    filter(
      preferredGazetteerName %in% tri_eezs) |> 
    pull(MRGID)
    
  f <- read_sf(glue(
    "https://geo.vliz.be/geoserver/MarineRegions/wfs?service=WFS&version=1.0.0&request=GetFeature&typeNames=eez&cql_filter=mrgid%20in%20({paste(mrgids, collapse=',')})&outputFormat=application/json"))
  
  f_pdc <- f |> 
    st_transform(3832)
  
  h_pdc <- st_convex_hull(f_pdc)
  
  h <- h_pdc |> 
    st_transform(4326) |> 
    mutate(
      geom = (geom + c(360,90)) %% c(360) - c(0,90))
  # st_bbox(h)
  #      xmin      ymin      xmax      ymax 
  # 160.60983 -55.94930 258.35853  31.79787 
  
  g180 <- ext(c(-180, 180, -90, 90)) |> st_bbox() |> st_as_sfc()
  # st_bbox(g180)
  # xmin ymin xmax ymax 
  # -180  -90  180   90 
  
  g360 <- ext(c(180, 360, -90, 90)) |> st_bbox() |> st_as_sfc()
  # st_bbox(g360)
  # xmin ymin xmax ymax 
  #   180  -90  360   90
  
  h_g180 <- st_intersection(h_gcs, g180) |> 
    st_set_crs(4326) # mapView(h_g180)
  h_g360 <- st_intersection(h_gcs, g360) |> 
    mutate(
      geom = (geom + c(360,-90)) %% c(-360) + c(0,90)) |> 
    st_set_crs(4326)
  # st_bbox(h_g360)
  #       xmin       ymin       xmax       ymax 
  # -180.00000  -53.01308 -101.64147   31.79787
  
  h <- rbind(
    h_g180,
    h_g360)
  # mapView(h)

  write_sf(h, h_geo)
}
h <- read_sf(h_geo)
# mapView(h)

# get stack of rasters ----
prjres   <- "_mol50km" # prjres in: View(projections_tbl)

# set rainbow color palette
pal <- colorRampPalette(brewer.pal(11, "Spectral"))
cols <- rev(pal(255))

P <- projections_tbl %>% filter(prjres == !!prjres)

# * planning unit ----
r_pu_id <- get_d_prjres("r_pu_id", prjres) # plot(r_pu_id)
r_pu <- setValues(r_pu_id, 1) %>% 
  mask(r_pu_id) # plot(r_pu)

# * biodiversity: now & future for nspp_all
s_bio_now_all <- get_gmbi_grpsmdl_prjres("groups00", prjres) %>% 
  subset("groups00_nspp_all")

s_bio_future_all <- get_gmbi_grpsmdl_prjres("groups00_2100", prjres) %>% 
  subset("groups00_2100_nspp_all")

# add red list sum for all species now and future
rls_all_now <- get_gmbi_grpsmdl_prjres("groups00", prjres) %>% 
  subset("groups00_rls_all")

rls_all_future <- get_gmbi_grpsmdl_prjres("groups00_2100", prjres) %>% 
  subset("groups00_2100_rls_all")

# * non-bio features ----
s_seamounts <- get_d_prjres("s_phys_seamounts",prjres)
lu_seamounts <- c(lteq200m="0to200",gt200lteq800m="gt200to800",gt800m="gt800")
lbls_seamounts <- sprintf("phys_seamounts_%sm", lu_seamounts[names(s_seamounts)])
seamounts_all <- sum(s_seamounts)

# * stack of features ----
s_features <- stack(
  get_d_prjres("r_vgpm", prjres),
  s_bio_now_all,
  s_bio_future_all,
  rls_all_now,
  rls_all_future,
  seamounts_all,
  get_d_prjres("r_phys_vents", prjres),
  get_d_prjres("r_phys_scapes_hetero", prjres))

# * sum stack of features, aka 'heatmap' ----
s_features_rescaled <- s_features
for (i in 1:nlayers(s_features)){
  s_features_rescaled[[i]] <- rescale_raster(s_features[[i]])
}
r_rescaled_sum <- sum(s_features_rescaled, na.rm = T) %>% 
  mask(r_pu_id)

s_features <- stack(s_features, r_rescaled_sum)
  
names(s_features) <- c(
  "bio_vgpm",
  "bio_now_all", 
  "bio_future_all",
  "rls_all_now",
  "rls_all_future",
  "seamounts_all",
  "phys_vents",
  "scapes_hetero",
  "rescaled_sum")

# * biodiversity: now, not 2100 ----
s_bio_gmbi <- get_gmbi_grpsmdl_prjres("groups02", prjres)
lyrs_bio_now <- names(s_bio_gmbi) %>%
  setdiff(str_subset(names(s_bio_gmbi), "rli")) %>%
  setdiff(str_subset(names(s_bio_gmbi), "rls"))
s_bio_now <- subset(s_bio_gmbi, lyrs_bio_now)

s_taxa <- s_bio_now
names(s_taxa) <- names(s_bio_now) |> 
  str_replace("groups02_nspp_(.*)$", "\\1")

S <- stack(s_features, s_taxa)

lyr_categories <- c(
  rep("broad", nlayers(s_features)), 
  rep("taxa", nlayers(s_bio_now)))

# setup map layers for plotting ----
P$epsg <- 'ESRI:54009'
countries <- rnaturalearth::ne_countries(returnclass = "sf") %>%
  st_transform(P$epsg)
graticules <- st_graticule(countries)
h_mol <- h |> 
  smoothr::densify(h, max_distance = 0.1) |> 
  st_transform('ESRI:54009')

# iterate over raster layers ----
do_figs <- F
for (i in 1:nlayers(S)){ # i = 1
  
  lyr <- names(S)[i]
  message(glue("lyr {i}/{nlayers(S)}: {lyr}"))
  
  # setup paths to outputs
  r_png <- glue("{dir_out}/{lyr}.png")
  h_png <- glue("{dir_out}/{lyr}_boxplot.png")
  
  # read raster
  r <- raster(S, lyr)
  
  # * plot map of raster layer with poly ∆ ----
  if (do_figs){
    png(r_png, width=480*4, height = 480*4, res=300, type="cairo", units='px')
    plot(r, col = cols, legend=T, axes=F, box=F)
    plot(st_geometry(countries), add=T, col=gray(0.8), border=gray(0.7), lwd=0.5)
    plot(st_geometry(graticules), add=T, col=gray(0.6), lwd=0.5)
    plot(st_geometry(h_mol), add=T, col=NA, border="purple", lwd=1)
    dev.off()
    
    # trim whitespace
    r_png %>%
      magick::image_read() %>% 
      magick::image_trim() %>%
      magick::image_write(r_png)
  }
  
  # * extract poly ∆ raster ----
  r_c <- crop(r, h_mol) |> 
    mask(h_mol)
  
  # * skip if no values, eg seagrasses ----
  if (length(na.omit(raster::values(r_c))) == 0)
    next()
  
  r_c <- r_c |> 
    trim()
  
  # * get values and calculate stats -----
  d_g <- raster::values(r) |> na.omit()
  d_p <- raster::values(r_c) |> na.omit()
  
  mu_g <- mean(d_g)
  mu_p <- mean(d_p)
  dif_mu_sd <- (mu_p - mu_g) / sd(d_g)
  w <- t.test(d_g, d_p)
  
  # setup text to annotate plot based on stats
  txt_vs <- case_when(
    (w$p.value < 0.05) & (mu_g < mu_p)  ~ "<",
    (w$p.value < 0.05) & (mu_g > mu_p)  ~ ">",
    T ~ "≈")
  txt_sig <- case_when(
    w$p.value < 0.001 ~ "***",
    w$p.value < 0.01  ~ "**",
    w$p.value < 0.05  ~ "*")
  
  # * plot boxplot -----
  if (do_figs){
    d <- bind_rows(
      tibble(
        Region = "Global",
        Value  = d_g),
      tibble(
        Region = "Polynesian ∆",
        Value  = d_p))
    
    g <- ggplot(d, aes(x=Region, y = Value, fill=Region)) + 
      geom_boxplot(notch = T, notchwidth = 0.5) +
      theme(legend.position="none") + 
      annotate(
        geom = "text",
        x = 1.5,
        y = mu_p,
        label = glue("{signif(mu_g,3)} {txt_vs} {signif(mu_p, 3)}\n{txt_sig}"), 
        size = 8)
    
    png(h_png, width=480*4, height = 480*4, res=300, type="cairo", units='px')
    print(g)
    dev.off()
  }
  
  d_stats <- tibble(
    category    = lyr_categories[i],
    layer       = lyr,
    avg_global  = mu_g,
    avg_polytri = mu_p,
    dif_mu_sd   = dif_mu_sd,
    dif_pval    = w$p.value)
  
  if (!file.exists(stats_csv)){
    write_csv(d_stats, stats_csv)
  } else {
    read_csv(stats_csv) |> 
      filter(layer != lyr) |> 
      bind_rows(
        d_stats) |> 
      write_csv(stats_csv)
  }
}
```

```{r map regions}
#| message: false

h <- read_sf(h_geo)
p_abnj_s05 <- p_abnj_s05 |> st_set_crs(4326)

leaflet(
  options = leafletOptions(
    worldCopyJump = T)) |>
  # add base: blue bathymetry and light brown/green topography
  addProviderTiles(
    "Esri.OceanBasemap",
    options = providerTileOptions(
      variant = "Ocean/World_Ocean_Base",
      noWrap = F)) |>
  # add reference: placename labels and borders
  addProviderTiles(
    "Esri.OceanBasemap",
    options = providerTileOptions(
      variant = "Ocean/World_Ocean_Reference",
      noWrap = F)) |> 
  addPolygons(
    data = h, group = "Polynesian ∆") |> 
  addPolygons(
    data = p_abnj_s05, 
    color = "gray", group = "High Seas") |> 
  addLayersControl(
    overlayGroups = c("Polynesian ∆", "High Seas"),
    options = layersControlOptions(collapsed = F)) |> 
  setView(0, 0, 1)
```

## Overview

```{r}
d <- read_csv(stats_csv) |> 
  mutate(
    is_significant = dif_pval < 0.05) |> 
  arrange(category, desc(is_significant), desc(dif_mu_sd))
d |> 
  select(category, layer, is_significant, dif_mu_sd, avg_global, avg_polytri, dif_pval) |> 
  datatable() |>
  formatRound(columns=c(
    'dif_mu_sd', 'avg_global', 'avg_polytri', 'dif_pval'), digits=3)
```

This table describes overall results ordered by `category`, `is_significant` (p-value from Welch's t-test < 0.05), and `dif_mu_sd`. The `dif_mu_sd` represents the difference between averages ($\mu_{polynesia}$ - $\mu_{global}$) divided by the Global standard deviation ($sd_{global}$), so the magnitude of the difference.

::: {.callout-note collapse="true"}

### Statistical Aside

In order to answer the question, are the averages between Global and Polynesian Triangle significantly different (i.e. reject the null hypothesis that the mean value is shared between the two sets of values), I used a Welchs' t-test, which does not assume equal variance between groups but does assume normal distribution. There are some other approaches to solving this.

![](https://reinventionjournal.org/index.php/reinvention/article/download/339/415/2114)
Figure 1 from [Preliminary Testing: The devil of statistics?](https://reinventionjournal.org/index.php/reinvention/article/download/339/415?inline=1#:~:text=Two%2Dstep%20test%20procedure%20with%20both%20equal%20variance%20and%20normality%20preliminary%20tests) describing a more thorough approach.

:::

## Broad Layers

::: {.panel-tabset}

```{r}
#| results: asis

d_broad <- d |> 
  filter(category == "broad") |> 
  arrange(layer)

#| results: asis
for(i in 1:nrow(d_broad)) { # i = 1
  
  lyr = d_broad$layer[i]
  r_png <- glue("./data/polynesian-triangle/{lyr}.png")
  h_png <- glue("./data/polynesian-triangle/{lyr}_boxplot.png")

  cat("\n\n",
    glue("
  
    ### {lyr}
    
    ::::: {{.panel-tabset}}
    
    #### box plot
    
    ![]({h_png})
    
    #### map
    
    ![]({r_png})
    
    :::::
    
    "))
  
}
```
:::


## Taxa Layers

::: {.panel-tabset}

```{r}
#| results: asis

d_taxa <- d |> 
  filter(category == "taxa") |> 
  arrange(layer)

#| results: asis
for(i in 1:nrow(d_taxa)) { # i = 1
  
  lyr = d_taxa$layer[i]
  r_png <- glue("./data/polynesian-triangle/{lyr}.png")
  h_png <- glue("./data/polynesian-triangle/{lyr}_boxplot.png")

  cat("\n\n",
    glue("
  
    ### {lyr}
    
    ::::: {{.panel-tabset}}
    
    #### box plot
    
    ![]({h_png})
    
    #### map
    
    ![]({r_png})
    
    :::::
    
    "))
  
}
```
:::

```{r stats_notes}
#| echo: false
#| eval: false

# are these statistically different?
# t.test(d_g, d_p)
# 	Welch Two Sample t-test
# 
# data:  d_g and d_p
# t = -26.496, df = 16088, p-value < 2.2e-16
# alternative hypothesis: true difference in means is not equal to 0
# 95 percent confidence interval:
#  -0.07769079 -0.06698797
# sample estimates:
# mean of x mean of y 
# 0.9509344 1.0232738 
w <- t.test(d_g, d_p)
# By default, if var.equal is FALSE then the variance is estimated separately for both groups and the Welch modification to the degrees of freedom is used.

w <- wilcox.test(d_g, d_p) # aka 'Mann-Whitney' test
#a Wilcoxon rank sum test (equivalent to the Mann-Whitney test: see the Note) is carried out. In this case, the null hypothesis is that the distributions of x and y differ by a location shift of mu and the alternative is that they differ by some other location shift (and the one-sided alternative "greater" is that x is shifted to the right of y).
names(w)
w$p.value
# w$p.value # 1.860199e-151


f <- var.test(Value ~ Region, d, alternative = "two.sided")
names(f$statistic)

var_eq <- f$p.value > 0.05

shapiro.test(d_g)

# Welch's test assumes normality but not equal variances. The Mann-Whitney test assumes equal variances but not normality.

```

```{r plotly_boxplot}
#| echo: false
#| eval: false

mu_g <- mean(d_g)
mu_p <- mean(d_p)
txt_vs <- case_when(
  (w$p.value < 0.05) & (mu_g < mu_p)  ~ "<",
  (w$p.value < 0.05) & (mu_g > mu_p)  ~ ">",
  T ~ "≈")
txt_sig <- case_when(
  w$p.value < 0.05  ~ "*",
  w$p.value < 0.01  ~ "**",
  w$p.value < 0.001 ~ "***")

col_g <- "gray"
col_p <- "blue"
p <- plot_ly(
  colors = c(col_g, col_p),
  type = "box", notched=T) |> 
  add_trace(
    y = d_g, name = "Global", color = I(col_g)) |> 
  add_trace(
    y = d_p, name = "Polynesian ∆", color = I(col_p)) |> 
  layout(
    showlegend  = F,
    annotations = list(
      x = 0.5,
      y = mean(d_p),
      text = glue("{signif(mu_g,3)} < {signif(mu_p, 3)}\n{txt_sig}"), 
      font = list(size = 16),
      showarrow = F))
p
```

```{r leaflet_raster}
#| echo: false
#| eval: false
b_mer <- ext(c(-179.8, 179.8, -89.8, 89.8)) |> st_bbox() |> st_as_sfc() |> st_set_crs(4326) |> st_transform(3857) |> st_bbox()

g <- rast(
  ncols=180*4, nrows=180*2, 
  xmin=b_mer[["xmin"]], xmax=b_mer[["xmax"]], 
  ymin=b_mer[["ymin"]], ymax=b_mer[["ymax"]], 
  crs='EPSG:3857')

r_mer <- terra::project(r, g)
# plot(r_mer)
mapView(r_mer)
```


